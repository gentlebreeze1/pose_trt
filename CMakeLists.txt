cmake_minimum_required(VERSION 3.0)
project(pose_zoo)
set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_CXX_FLAGS "-std=c++11")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
find_package(CUDA REQUIRED)
include_directories(${CUDA_INCLUDE_DIRS})
find_package(OpenCV REQUIRED)
if (NOT OpenCV_FOUND)
  message(FATAL_ERROR "opencv not found")
endif (NOT OpenCV_FOUND)
include(cmake/CUDA_utils.cmake)
set(SM_VERSION "" CACHE STRING "Description")
if(SM_VERSION)
  set(CUDA_targeted_archs ${SM_VERSION})
  CUDA_get_gencode_args(CUDA_gencode_flags ${CUDA_targeted_archs})
else()
  # Discover what architectures does nvcc support
  CUDA_find_supported_arch_values(CUDA_supported_archs ${CUDA_known_archs})
  message(STATUS "CUDA supported archs: ${CUDA_supported_archs}")

  set(CUDA_TARGET_ARCHS_SORTED ${CUDA_TARGET_ARCHS})
  list(SORT CUDA_TARGET_ARCHS_SORTED)
  CUDA_find_supported_arch_values(CUDA_targeted_archs ${CUDA_TARGET_ARCHS_SORTED})
  message(STATUS "CUDA targeted archs: ${CUDA_targeted_archs}")
  if (NOT CUDA_targeted_archs)
    message(FATAL_ERROR "None of the provided CUDA architectures ({${CUDA_TARGET_ARCHS}}) is supported by nvcc, use one or more of: ${CUDA_supported_archs}")
  endif()
  CUDA_get_gencode_args(CUDA_gencode_flags ${CUDA_targeted_archs})
endif()
set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} ${CUDA_gencode_flags}")
include_directories(./include)
include_directories(./mytrt)
include_directories(./openpose)
include_directories(./yolov5)
include_directories(./openpose/include)
include_directories(./mytrt/spdlog)
include_directories(./mytrt/pybind11/include)
include_directories(./mytrt/utils)
include_directories(./mytrt/plugin)
include_directories(./mmpose)
link_libraries(${PROJECT_SOURCE_DIR}/lib)
link_directories(/usr/lib/x86_64-linux-gnu)
find_library(CUDART cudart HINTS /usr/local/cuda/targets/x86_64-linux/lib/)
add_subdirectory(mytrt)
add_subdirectory(openpose)
add_subdirectory(mmpose)
add_subdirectory(yolov5)
