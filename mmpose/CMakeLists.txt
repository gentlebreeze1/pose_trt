cmake_minimum_required(VERSION 3.0)
project(testmmpose)
set(CMAKE_CXX_FLAGS "-std=c++11")
option(BUILD_TEST "compile test" ON)
find_package(CUDA REQUIRED)
include(../cmake/CUDA_utils.cmake)
set(SM_VERSION "" CACHE STRING "Description")
if(SM_VERSION)
    set(CUDA_targeted_archs ${SM_VERSION})
    CUDA_get_gencode_args(CUDA_gencode_flags ${CUDA_targeted_archs})
else()
    # Discover what architectures does nvcc support
    CUDA_find_supported_arch_values(CUDA_supported_archs ${CUDA_known_archs})
    message(STATUS "CUDA supported archs: ${CUDA_supported_archs}")

    set(CUDA_TARGET_ARCHS_SORTED ${CUDA_TARGET_ARCHS})
    list(SORT CUDA_TARGET_ARCHS_SORTED)
    CUDA_find_supported_arch_values(CUDA_targeted_archs ${CUDA_TARGET_ARCHS_SORTED})
    message(STATUS "CUDA targeted archs: ${CUDA_targeted_archs}")
    if (NOT CUDA_targeted_archs)
        message(FATAL_ERROR "None of the provided CUDA architectures ({${CUDA_TARGET_ARCHS}}) is supported by nvcc, use one or more of: ${CUDA_supported_archs}")
    endif()
    CUDA_get_gencode_args(CUDA_gencode_flags ${CUDA_targeted_archs})
endif()
# Add ptx & bin flags for cuda
set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} ${CUDA_gencode_flags}")
option(ENABLE_PRELU_FP16 "" OFF)
if(ENABLE_PRELU_FP16)
    add_definitions(-DFP16_PRELU)
endif()
include_directories(./)
include_directories(/disk2/my_trt/my_version/pose/include)
include_directories(/disk2/my_trt/my_version/pose/include/opencv)
include_directories(/disk2/my_trt/my_version/pose/include/opencv2)
include_directories(/disk2/my_trt/my_version/pose/mytrt)
link_libraries(/disk2/my_trt/my_version/pose/lib)
find_library(CUDART cudart HINTS /usr/local/cuda/targets/x86_64-linux/lib/)
file(GLOB mmpose_source
        ./*.cpp
        ./*.cu
        )
cuda_add_library(mmpose SHARED ${mmpose_source})
target_compile_options(mmpose PUBLIC -std=c++11 -Wall -Wfloat-conversion)
set_target_properties(mmpose PROPERTIES POSITION_INDEPENDENT_CODE ON)
file(GLOB test_source
        test/demo_mmpose.cpp
        )
add_executable(testmmpose ${test_source})
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libmmpose.so)
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libtinytrt.so)
target_compile_options(testmmpose PUBLIC -std=c++11 -Wall -Wfloat-conversion)
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libnvinfer.so)
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libnvinfer_plugin.so)
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libnvparsers.so)
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libnvonnxparser.so)
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libnvcaffe_parser.so)
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libopencv_core.so )
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libopencv_highgui.so )
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libopencv_imgproc.so )
target_link_libraries(testmmpose /disk2/my_trt/my_version/pose/lib/libopencv_imgcodecs.so )

#target_link_libraries(testopenpose /disk2/my_trt/my_version/pose/lib/libopencv_highgui.so )
